{"version":3,"sources":["generate.js","App.js","serviceWorker.js","index.js"],"names":["characterStrings","lowercase","uppercase","numbers","specialCharacters","validateChars","criteria","Object","keys","filter","key","generatePassword","console","log","filteredCriteria","length","wordbank","retVal","i","Math","floor","random","buildPassword","reduce","accumulator","buildWordbank","App","defaultSettings","password","copySuccess","useState","configs","setConfigs","check","e","name","value","returnVal","makeObject","target","checked","className","readOnly","id","placeholder","aria-label","onClick","el","select","document","execCommand","style","type","onChange","min","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b5affec.chunk.js","sourcesContent":["const characterStrings = {\r\n  lowercase: \"abcdefghijklmnopqrstuvwxyz\",\r\n  uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n  numbers: \"0123456789\",\r\n  specialCharacters: ` !\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`\r\n};\r\n\r\nfunction validateChars(criteria) {\r\n  return Object.keys(criteria)\r\n    .filter(key => criteria[key] && key !== 'length' && key !== 'password');\r\n}\r\n\r\nfunction buildWordbank(criteria, characterStrings) {\r\n  // use filtered criteria to map against the character strings\r\n  return criteria.reduce((accumulator, key) => accumulator + characterStrings[key], '');\r\n}\r\n\r\nfunction buildPassword(wordbank, length) {\r\n  let retVal = '';\r\n  for(let i = 0; i < length; i++) {\r\n    retVal += wordbank[Math.floor(Math.random() * wordbank.length)];\r\n  }\r\n  return retVal;\r\n}\r\n\r\nfunction generatePassword(criteria) {\r\n  console.log(criteria);\r\n  const filteredCriteria = validateChars(criteria);\r\n\r\n  // make sure the filtered criteria has a non-zero length\r\n  if (validateChars(criteria).length) {\r\n    const wordbank = buildWordbank(filteredCriteria, characterStrings);\r\n    return buildPassword(wordbank, criteria.length);\r\n  }\r\n  else {\r\n    return \"Invalid criteria. Please check one or more boxes below.\"\r\n  }\r\n}\r\n\r\nfunction makeObject(name, value) {\r\n  const returnVal = {};\r\n  returnVal[name] = value;\r\n  return returnVal;\r\n}\r\n\r\nexport {\r\n  generatePassword,\r\n  makeObject\r\n};","import React, { useState } from 'react';\r\nimport { generatePassword, makeObject } from './generate';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const defaultSettings = {\r\n    password: '',\r\n    uppercase: false,\r\n    lowercase: false,\r\n    specialCharacters: false,\r\n    numbers: false,\r\n    length: 8,\r\n    copySuccess: false\r\n  };\r\n\r\n  const [configs, setConfigs] = useState(defaultSettings);\r\n\r\n  function generate() {\r\n    const password = generatePassword(configs);\r\n    setConfigs({\r\n      ...configs,\r\n      password\r\n    });\r\n  }\r\n\r\n  function updateLength(length) {\r\n    setConfigs({\r\n      ...configs,\r\n      length\r\n    });\r\n  }\r\n\r\n  function check(e) {\r\n    const temp = makeObject(e.target.name, e.target.checked);\r\n    setConfigs({\r\n      ...configs,\r\n      [e.target.name]: e.target.checked\r\n    })\r\n  }\r\n\r\n  function copy(e) {\r\n    const el = e.target;\r\n    console.log(e.target.value)// textarea;\r\n    el.select();\r\n    document.execCommand('copy');\r\n  }\r\n\r\n  function reset() {\r\n    setConfigs(defaultSettings);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Password Generator React</h1>\r\n      </header>\r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <h2>Generate a Password</h2>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <textarea\r\n              readOnly\r\n              id=\"password\"\r\n              placeholder=\"Your Secure Password. Click here to copy password.\"\r\n              aria-label=\"Generated Password\"\r\n              value={configs.password}\r\n              onClick={copy}\r\n            ></textarea>\r\n            {\r\n              configs.copySuccess ?\r\n                <div style={{ \"color\": \"green\" }}>\r\n                  Success!\r\n                  </div> : null\r\n            }\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <button className=\"btn\" onClick={generate}>\r\n              Generate Password\r\n              </button>\r\n            <button className=\"btn\" onClick={reset}>\r\n              Reset\r\n              </button>\r\n          </div>\r\n         Criteria: (Must select one or more)\r\n         <div>\r\n            <label>\r\n              <input type=\"checkbox\" name=\"lowercase\" checked={configs.lowercase} onChange={(e) => check(e)}></input>\r\n                Include Lowercase\r\n             </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <input type=\"checkbox\" name=\"uppercase\" checked={configs.uppercase} onChange={(e) => check(e)}></input>\r\n                Include Uppercase\r\n              </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <input type=\"checkbox\" name=\"numbers\" checked={configs.numbers} onChange={(e) => check(e)}></input>\r\n                Include Numbers\r\n              </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <input type=\"checkbox\" name=\"specialCharacters\" checked={configs.specialCharacters} onChange={(e) => check(e)}></input>\r\n                  Include Special Characters\r\n                </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <div>\r\n                <input type=\"range\" min=\"8\" max=\"128\" value={configs.length} onChange={(e) => updateLength(e.target.value)}></input>\r\n              </div>\r\n                Length: {configs.length} (Between 8 and 128)\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}